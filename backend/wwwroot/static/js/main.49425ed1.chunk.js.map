{"version":3,"sources":["services/handoverGroupService.ts","services/typescript-axios/base.ts","services/typescript-axios/apis/account-api.ts","services/typescript-axios/apis/handover-api.ts","services/typescript-axios/apis/pmi-api.ts","services/axiosService.ts","services/handoverService.ts","services/handoverlogService.ts","services/getPatientService.ts","services/userService.ts","components/LoginForm.tsx","components/NavBar.tsx","services/themeService.ts","components/grid/DataGridPatient.tsx","components/input/DateInputGroup.tsx","components/HandoverHistory.tsx","components/HandoverForm.tsx","components/grid/DataGridHandover.tsx","pages/HomeContent.tsx","App.tsx","index.tsx"],"names":["_handovergroup","BehaviorSubject","handovergroupService","subject","asObservable","send","msg","next","groupValue","value","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","name","Error","AccountApiAxiosParamCreator","accountLogin","body","a","options","undefined","key","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","URLSearchParams","search","set","params","toString","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","pathname","hash","accountLogout","AccountApiFp","localVarAxiosArgs","axiosRequestArgs","request","AccountApi","then","HandoverApiAxiosParamCreator","handoverDeleteHandover","id","handoverGetHandover","patientKey","encodeURIComponent","String","handoverGetHandoverGroups","handoverGetHandoverHistory","log","handoverGetHandoverLog","handoverPostHandover","groupId","handoverQueryHandover","specialtyCode","asof","sortdatafield","sortorder","pagesize","pagenum","Date","toISOString","HandoverApiFp","HandoverApi","PmiApiAxiosParamCreator","pmiGetPatient","pmiQueryPatient","PmiApiFp","PmiApi","isoDateTimeFormat","isoDateFormat","isIsoDateString","test","handleDates","Object","keys","parseISO","client","create","interceptors","response","use","originalResponse","apiService","handover","process","account","pmi","_handover","_handoverDate","handoverService","handoverValue","dateSubject","sendDate","dateValue","_handoverlog","handoverlogService","logValue","_GetWardPatient","getPatientService","document","title","resend","patientValue","userSubject","parse","localStorage","getItem","userService","user","userValue","login","model","withCredentials","setItem","catch","err","logout","clear","createStandaloneToast","toast","description","status","duration","isClosable","position","schema","yup","shape","username","required","password","min","LoginForm","useNavigate","useState","isLoading","setIsLoading","useForm","mode","resolver","yupResolver","register","handleSubmit","setError","errors","formState","style","width","onSubmit","values","error","message","finally","isInvalid","p","isRequired","type","placeholder","autoComplete","px","pb","apiError","mx","mt","w","colorScheme","variant","disabled","loadingText","NavBar","useDisclosure","isOpen","onOpen","onClose","setUser","userGroup","setUserGroup","groupList","setGroupList","GroupButton","as","Button","groupName","onChange","v","find","g","map","i","useEffect","token","subscribe","x","unsubscribe","groupSubject","bg","useColorModeValue","h","alignItems","justifyContent","size","icon","display","md","onClick","spacing","sx","left","color","align","fontSize","textAlign","lineHeight","base","to","gap","rounded","cursor","minW","src","person","displayName","blur","extendTheme","theme","components","Menu","baseStyle","list","zIndex","Textarea","background","backgroundColor","_focus","Input","parts","addon","variants","outline","filled","_hover","defaultProps","PatientGrid","props","myGrid","React","onFetch","bind","onSelect","onBinding","getSelected","clearSelection","refresh","_","debounce","state","isDrawer","selectedRow","rowsheight","columns","text","datafield","cellsformat","sortable","filterable","source","jqx","dataAdapter","datafields","format","totalrecords","datatype","root","sortcolumn","sortdirection","loadError","jqXHR","beforeSend","settings","setRequestHeader","beforeprocessing","totalRows","processdata","ref","onFilter","onSort","onCellclick","rendergridrows","onRender","onBindingcomplete","pageable","altrows","columnsresize","virtualmode","autoheight","selectionmode","autoshowfiltericon","updatedelay","scrollmode","e","current","setOptions","obj","getselectedrowindex","updatebounddata","handleObj","selected","getrowdatabyid","args","row","bounddata","omit","clearselection","localDate","dt","valueOf","getTimezoneOffset","DateInputGroup","forwardRef","readOnly","isReadOnly","isDisabled","PropTypes","bool","string","func","node","oneOfType","element","number","array","oneOf","instanceOf","arrayOf","start","end","locale","object","ShadowRoot","HandoverHistory","setLog","select","setSelect","inputRef","useRef","selectedLog","subscription","apiGetLog","rxGetLogSubject","from","pipe","delay","catchError","throwError","l","length","logText","complete","handleDelete","r","handoverId","handleRefresh","border","borderRadius","borderColor","justify","fontWeight","thickness","speed","emptyColor","leftIcon","FiXSquare","stroke","fill","overflowY","direction","parseInt","item","logBy","logTime","handoverSchema","patientName","dob","nullable","notRequired","sex","wardCode","bedNumber","admissionTime","caseNumber","diagnosis","progress","ix","drugs","recommendation","editedBy","editedDate","freeText","HandoverForm","useBoolean","isSubmit","setIsSubmit","isFreeText","setPatientKey","setHandoverId","pid","useParams","navigate","useLocation","isDirty","isValid","reset","control","getValues","setValue","apiGetHistory","rxGetHistorySubject","useDebounce","patientSubscriber","logSubscriber","setBackgroundColor","useMemo","api","on","off","lg","flex","mb","hasArrow","label","GrClearOption","pl","pr","templateColumns","render","onBlur","customInput","dateFormat","colSpan","sm","HandoverGrid","HomeContent","pGrid","hGrid","showGrid","setShowGrid","handoverDate","setHandoverDate","useCallback","rxLoadGridSubject","of","d","allowMultiple","index","Box","onFocus","require","App","basename","path","window","ieloading","getElementById","remove","rootElement"],"mappings":"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","file":"static/js/main.49425ed1.chunk.js","sourcesContent":["import { BehaviorSubject } from \"rxjs\";\r\nimport { HandoverGroup } from \"./typescript-axios\";\r\n\r\nconst _handovergroup = new BehaviorSubject<HandoverGroup>({} as HandoverGroup);\r\n\r\nexport const handovergroupService = {\r\n  subject: _handovergroup.asObservable(),\r\n  send: function (msg: HandoverGroup) {\r\n    _handovergroup.next(msg);\r\n  },\r\n  get groupValue() {\r\n    return _handovergroup.value;\r\n  }\r\n};\r\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * My Title\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosRequestConfig, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:52000/\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * My Title\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { LoginRequest } from '../models';\nimport { LoginResponse } from '../models';\n/**\n * AccountApi - axios parameter creator\n * @export\n */\nexport const AccountApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LoginRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        accountLogin: async (body: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLogin.');\n            }\n            const localVarPath = `/api/Account/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        accountLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Account/logout`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AccountApi - functional programming interface\n * @export\n */\nexport const AccountApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LoginRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async accountLogin(body: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoginResponse>>> {\n            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountLogin(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async accountLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {\n            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountLogout(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * AccountApi - factory interface\n * @export\n */\nexport const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {LoginRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async accountLogin(body: LoginRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<LoginResponse>> {\n            return AccountApiFp(configuration).accountLogin(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async accountLogout(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {\n            return AccountApiFp(configuration).accountLogout(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AccountApi - object-oriented interface\n * @export\n * @class AccountApi\n * @extends {BaseAPI}\n */\nexport class AccountApi extends BaseAPI {\n    /**\n     * \n     * @param {LoginRequest} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public async accountLogin(body: LoginRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<LoginResponse>> {\n        return AccountApiFp(this.configuration).accountLogin(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountApi\n     */\n    public async accountLogout(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {\n        return AccountApiFp(this.configuration).accountLogout(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * My Title\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { GridQueryResponseOfQueryHandoverResponse } from '../models';\nimport { Handover } from '../models';\nimport { HandoverGroup } from '../models';\nimport { HandoverLog } from '../models';\n/**\n * HandoverApi - axios parameter creator\n * @export\n */\nexport const HandoverApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [id] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        handoverDeleteHandover: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Handover/delete`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        handoverGetHandover: async (patientKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'patientKey' is not null or undefined\n            if (patientKey === null || patientKey === undefined) {\n                throw new RequiredError('patientKey','Required parameter patientKey was null or undefined when calling handoverGetHandover.');\n            }\n            const localVarPath = `/api/Handover/{patientKey}`\n                .replace(`{${\"patientKey\"}}`, encodeURIComponent(String(patientKey)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        handoverGetHandoverGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Handover/groups`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {string} [log] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        handoverGetHandoverHistory: async (patientKey: string, log?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'patientKey' is not null or undefined\n            if (patientKey === null || patientKey === undefined) {\n                throw new RequiredError('patientKey','Required parameter patientKey was null or undefined when calling handoverGetHandoverHistory.');\n            }\n            const localVarPath = `/api/Handover/history/{patientKey}`\n                .replace(`{${\"patientKey\"}}`, encodeURIComponent(String(patientKey)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (log !== undefined) {\n                localVarQueryParameter['log'] = log;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        handoverGetHandoverLog: async (patientKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'patientKey' is not null or undefined\n            if (patientKey === null || patientKey === undefined) {\n                throw new RequiredError('patientKey','Required parameter patientKey was null or undefined when calling handoverGetHandoverLog.');\n            }\n            const localVarPath = `/api/Handover/log/{patientKey}`\n                .replace(`{${\"patientKey\"}}`, encodeURIComponent(String(patientKey)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {Handover} body \n         * @param {number} [groupId] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        handoverPostHandover: async (body: Handover, groupId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling handoverPostHandover.');\n            }\n            const localVarPath = `/api/Handover`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (groupId !== undefined) {\n                localVarQueryParameter['groupId'] = groupId;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [specialtyCode] \n         * @param {Date} [asof] \n         * @param {string} [sortdatafield] \n         * @param {string} [sortorder] \n         * @param {number} [pagesize] \n         * @param {number} [pagenum] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        handoverQueryHandover: async (specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Handover/QueryHandover`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (specialtyCode !== undefined) {\n                localVarQueryParameter['specialtyCode'] = specialtyCode;\n            }\n\n            if (asof !== undefined) {\n                localVarQueryParameter['asof'] = (asof as any instanceof Date) ?\n                    (asof as any).toISOString() :\n                    asof;\n            }\n\n            if (sortdatafield !== undefined) {\n                localVarQueryParameter['sortdatafield'] = sortdatafield;\n            }\n\n            if (sortorder !== undefined) {\n                localVarQueryParameter['sortorder'] = sortorder;\n            }\n\n            if (pagesize !== undefined) {\n                localVarQueryParameter['pagesize'] = pagesize;\n            }\n\n            if (pagenum !== undefined) {\n                localVarQueryParameter['pagenum'] = pagenum;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * HandoverApi - functional programming interface\n * @export\n */\nexport const HandoverApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [id] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverDeleteHandover(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {\n            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverDeleteHandover(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandover(patientKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Handover>>> {\n            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandover(patientKey, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandoverGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HandoverGroup>>>> {\n            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandoverGroups(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {string} [log] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandoverHistory(patientKey: string, log?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Handover>>> {\n            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandoverHistory(patientKey, log, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandoverLog(patientKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HandoverLog>>>> {\n            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandoverLog(patientKey, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {Handover} body \n         * @param {number} [groupId] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverPostHandover(body: Handover, groupId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Handover>>> {\n            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverPostHandover(body, groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [specialtyCode] \n         * @param {Date} [asof] \n         * @param {string} [sortdatafield] \n         * @param {string} [sortorder] \n         * @param {number} [pagesize] \n         * @param {number} [pagenum] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverQueryHandover(specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GridQueryResponseOfQueryHandoverResponse>>> {\n            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverQueryHandover(specialtyCode, asof, sortdatafield, sortorder, pagesize, pagenum, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * HandoverApi - factory interface\n * @export\n */\nexport const HandoverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {string} [id] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverDeleteHandover(id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {\n            return HandoverApiFp(configuration).handoverDeleteHandover(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandover(patientKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Handover>> {\n            return HandoverApiFp(configuration).handoverGetHandover(patientKey, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandoverGroups(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HandoverGroup>>> {\n            return HandoverApiFp(configuration).handoverGetHandoverGroups(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {string} [log] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandoverHistory(patientKey: string, log?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Handover>> {\n            return HandoverApiFp(configuration).handoverGetHandoverHistory(patientKey, log, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} patientKey \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverGetHandoverLog(patientKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HandoverLog>>> {\n            return HandoverApiFp(configuration).handoverGetHandoverLog(patientKey, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {Handover} body \n         * @param {number} [groupId] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverPostHandover(body: Handover, groupId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Handover>> {\n            return HandoverApiFp(configuration).handoverPostHandover(body, groupId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} [specialtyCode] \n         * @param {Date} [asof] \n         * @param {string} [sortdatafield] \n         * @param {string} [sortorder] \n         * @param {number} [pagesize] \n         * @param {number} [pagenum] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async handoverQueryHandover(specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GridQueryResponseOfQueryHandoverResponse>> {\n            return HandoverApiFp(configuration).handoverQueryHandover(specialtyCode, asof, sortdatafield, sortorder, pagesize, pagenum, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * HandoverApi - object-oriented interface\n * @export\n * @class HandoverApi\n * @extends {BaseAPI}\n */\nexport class HandoverApi extends BaseAPI {\n    /**\n     * \n     * @param {string} [id] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HandoverApi\n     */\n    public async handoverDeleteHandover(id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {\n        return HandoverApiFp(this.configuration).handoverDeleteHandover(id, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {string} patientKey \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HandoverApi\n     */\n    public async handoverGetHandover(patientKey: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Handover>> {\n        return HandoverApiFp(this.configuration).handoverGetHandover(patientKey, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HandoverApi\n     */\n    public async handoverGetHandoverGroups(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HandoverGroup>>> {\n        return HandoverApiFp(this.configuration).handoverGetHandoverGroups(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {string} patientKey \n     * @param {string} [log] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HandoverApi\n     */\n    public async handoverGetHandoverHistory(patientKey: string, log?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Handover>> {\n        return HandoverApiFp(this.configuration).handoverGetHandoverHistory(patientKey, log, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {string} patientKey \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HandoverApi\n     */\n    public async handoverGetHandoverLog(patientKey: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HandoverLog>>> {\n        return HandoverApiFp(this.configuration).handoverGetHandoverLog(patientKey, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {Handover} body \n     * @param {number} [groupId] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HandoverApi\n     */\n    public async handoverPostHandover(body: Handover, groupId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Handover>> {\n        return HandoverApiFp(this.configuration).handoverPostHandover(body, groupId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {string} [specialtyCode] \n     * @param {Date} [asof] \n     * @param {string} [sortdatafield] \n     * @param {string} [sortorder] \n     * @param {number} [pagesize] \n     * @param {number} [pagenum] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HandoverApi\n     */\n    public async handoverQueryHandover(specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GridQueryResponseOfQueryHandoverResponse>> {\n        return HandoverApiFp(this.configuration).handoverQueryHandover(specialtyCode, asof, sortdatafield, sortorder, pagesize, pagenum, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * My Title\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { GetWardPatient } from '../models';\nimport { GridQueryResponseOfGetWardPatient } from '../models';\n/**\n * PmiApi - axios parameter creator\n * @export\n */\nexport const PmiApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [patientKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pmiGetPatient: async (patientKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Pmi/patient`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (patientKey !== undefined) {\n                localVarQueryParameter['patientKey'] = patientKey;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [specialtyCode] \n         * @param {string} [sortdatafield] \n         * @param {string} [sortorder] \n         * @param {number} [pagesize] \n         * @param {number} [pagenum] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pmiQueryPatient: async (specialtyCode?: string, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Pmi/QueryPatient`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (specialtyCode !== undefined) {\n                localVarQueryParameter['specialtyCode'] = specialtyCode;\n            }\n\n            if (sortdatafield !== undefined) {\n                localVarQueryParameter['sortdatafield'] = sortdatafield;\n            }\n\n            if (sortorder !== undefined) {\n                localVarQueryParameter['sortorder'] = sortorder;\n            }\n\n            if (pagesize !== undefined) {\n                localVarQueryParameter['pagesize'] = pagesize;\n            }\n\n            if (pagenum !== undefined) {\n                localVarQueryParameter['pagenum'] = pagenum;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PmiApi - functional programming interface\n * @export\n */\nexport const PmiApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [patientKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pmiGetPatient(patientKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetWardPatient>>> {\n            const localVarAxiosArgs = await PmiApiAxiosParamCreator(configuration).pmiGetPatient(patientKey, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [specialtyCode] \n         * @param {string} [sortdatafield] \n         * @param {string} [sortorder] \n         * @param {number} [pagesize] \n         * @param {number} [pagenum] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pmiQueryPatient(specialtyCode?: string, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GridQueryResponseOfGetWardPatient>>> {\n            const localVarAxiosArgs = await PmiApiAxiosParamCreator(configuration).pmiQueryPatient(specialtyCode, sortdatafield, sortorder, pagesize, pagenum, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * PmiApi - factory interface\n * @export\n */\nexport const PmiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {string} [patientKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pmiGetPatient(patientKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GetWardPatient>> {\n            return PmiApiFp(configuration).pmiGetPatient(patientKey, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} [specialtyCode] \n         * @param {string} [sortdatafield] \n         * @param {string} [sortorder] \n         * @param {number} [pagesize] \n         * @param {number} [pagenum] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pmiQueryPatient(specialtyCode?: string, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GridQueryResponseOfGetWardPatient>> {\n            return PmiApiFp(configuration).pmiQueryPatient(specialtyCode, sortdatafield, sortorder, pagesize, pagenum, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PmiApi - object-oriented interface\n * @export\n * @class PmiApi\n * @extends {BaseAPI}\n */\nexport class PmiApi extends BaseAPI {\n    /**\n     * \n     * @param {string} [patientKey] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PmiApi\n     */\n    public async pmiGetPatient(patientKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetWardPatient>> {\n        return PmiApiFp(this.configuration).pmiGetPatient(patientKey, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {string} [specialtyCode] \n     * @param {string} [sortdatafield] \n     * @param {string} [sortorder] \n     * @param {number} [pagesize] \n     * @param {number} [pagenum] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PmiApi\n     */\n    public async pmiQueryPatient(specialtyCode?: string, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GridQueryResponseOfGetWardPatient>> {\n        return PmiApiFp(this.configuration).pmiQueryPatient(specialtyCode, sortdatafield, sortorder, pagesize, pagenum, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","import { AccountApi, HandoverApi, PmiApi } from \"./typescript-axios\";\nimport { parseISO } from \"date-fns\";\nimport axios from \"axios\";\n\nconst isoDateTimeFormat =\n  /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[-+]\\d{2}:?\\d{2}|Z)?$/;\nconst isoDateFormat = /^\\d{4}-\\d{2}-\\d{2}?$/;\n\nfunction isIsoDateString(value: any): boolean {\n  return (\n    value &&\n    typeof value === \"string\" &&\n    (isoDateFormat.test(value) || isoDateTimeFormat.test(value))\n  );\n}\n\nfunction handleDates(body: any) {\n  if (body === null || body === undefined || typeof body !== \"object\")\n    return body;\n\n  for (const key of Object.keys(body)) {\n    const value = body[key];\n    if (isIsoDateString(value)) {\n      body[key] = parseISO(value);\n    } else if (typeof value === \"object\") handleDates(value);\n  }\n}\n\nconst client = axios.create();\n\nclient.interceptors.response.use((originalResponse) => {\n  handleDates(originalResponse.data);\n  return originalResponse;\n});\n\nconst handover = new HandoverApi(undefined, process.env.REACT_APP_API, client);\nconst account = new AccountApi(undefined, process.env.REACT_APP_API, client);\nconst pmi = new PmiApi(undefined, process.env.REACT_APP_API, client);\n\nexport const apiService = {\n  handover: handover,\n  account: account,\n  pmi: pmi\n};\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { Handover } from \"./typescript-axios\";\r\n\r\nconst _handover = new BehaviorSubject<Handover>({} as Handover);\r\nconst _handoverDate = new BehaviorSubject<Date>(new Date());\r\n\r\nexport const handoverService = {\r\n  subject: _handover.asObservable(),\r\n  send: function (msg: Handover) {\r\n    _handover.next(msg);\r\n  },\r\n  get handoverValue() {\r\n    return _handover.value;\r\n  },\r\n  dateSubject: _handoverDate.asObservable(),\r\n  sendDate: function (msg: Date) {\r\n    _handoverDate.next(msg);\r\n  },\r\n  get dateValue() {\r\n    return _handoverDate.value;\r\n  }\r\n};\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { HandoverLog } from \"./typescript-axios\";\r\n\r\nconst _handoverlog = new BehaviorSubject<HandoverLog>({} as HandoverLog);\r\n\r\nexport const handoverlogService = {\r\n  subject: _handoverlog.asObservable(),\r\n  send: function (msg: HandoverLog) {\r\n    _handoverlog.next(msg);\r\n  },\r\n  get logValue() {\r\n    return _handoverlog.value;\r\n  }\r\n};\r\n","import { handoverService } from \"./handoverService\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { GetWardPatient, Handover, HandoverLog } from \"./typescript-axios\";\r\nimport { handoverlogService } from \"./handoverlogService\";\r\n\r\nconst _GetWardPatient = new BehaviorSubject<GetWardPatient>(\r\n  {} as GetWardPatient\r\n);\r\n\r\nexport const getPatientService = {\r\n  subject: _GetWardPatient.asObservable(),\r\n  send: function (msg: GetWardPatient) {\r\n    if (msg?.patientKey) document.title = \"Handover - \" + msg?.patientKey;\r\n    else document.title = \"Handover\";\r\n    handoverService.send({} as Handover);\r\n    handoverlogService.send({} as HandoverLog);\r\n    _GetWardPatient.next(msg);\r\n  },\r\n  resend: () => {\r\n    _GetWardPatient.next(_GetWardPatient.value);\r\n  },\r\n  get patientValue() {\r\n    return _GetWardPatient.value;\r\n  }\r\n};\r\n","import { HandoverGroup } from './typescript-axios/models/handover-group';\nimport { handovergroupService } from './handoverGroupService';\nimport { GetWardPatient, LoginResponse } from \"../services/typescript-axios\";\nimport { BehaviorSubject } from \"rxjs\";\n\nimport { LoginRequest } from \"../services/typescript-axios\";\nimport { apiService } from \"./axiosService\";\nimport { createStandaloneToast } from \"@chakra-ui/react\";\nimport { getPatientService } from \"./getPatientService\";\n\nconst userSubject = new BehaviorSubject<LoginResponse>(\n  JSON.parse((localStorage ? localStorage.getItem(\"user_json\") : \"\") as string) as LoginResponse\n);\n\nexport const userService = {\n  user: userSubject.asObservable(),\n  get userValue() {\n    return userSubject.value;\n  },\n  login,\n  logout\n};\n\nfunction login(model: LoginRequest) {\n  let api = apiService.account;\n\n  return api\n    .accountLogin(model, { withCredentials: true })\n    .then((user) => {\n      // publish user to subscribers and store in local storage to stay logged in between page refreshes\n      userSubject.next(user.data);\n      localStorage && localStorage.setItem(\"user_json\", JSON.stringify(user.data));\n      return user;\n    })\n    .catch((err) => {});\n}\n\nfunction logout() {\n  localStorage && localStorage.clear();\n\n  let api = apiService.account;\n  api\n    .accountLogout({ withCredentials: true })\n    .then(() => {\n      userSubject.next({} as LoginResponse);\n      handovergroupService.send({} as HandoverGroup);\n      getPatientService.send({} as GetWardPatient);\n    })\n    .catch((err) => {\n      const toast = createStandaloneToast();\n      toast({\n        title: `Server not found`,\n        description: ``,\n        status: \"error\",\n        duration: 9000,\n        isClosable: true,\n        position: \"bottom-right\"\n      });\n    });\n}\n","import {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Button\n} from \"@chakra-ui/react\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { userService } from \"../services/userService\";\nimport { LoginRequest } from \"../services/typescript-axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nexport { LoginForm };\n\nconst schema = yup.object().shape({\n  username: yup.string().required(),\n  password: yup.string().min(8).required()\n});\n\ntype LoginFormInputs = {\n  username: string;\n  password: string;\n  apiError: string;\n};\n\nfunction LoginForm() {\n  let history = useNavigate();\n  const [isLoading, setIsLoading] = useState<Boolean>(false);\n\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors }\n  } = useForm<LoginFormInputs>({\n    mode: \"onSubmit\",\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = (values: LoginRequest) => {\n    setIsLoading(true);\n    return userService\n      .login(values)\n      .then(() => {})\n      .catch((error) => {\n        setError(\"apiError\", { message: error });\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <form style={{ width: 350 }} onSubmit={handleSubmit(onSubmit)}>\n      <FormControl isInvalid={!!errors?.username?.message} p=\"4\" isRequired>\n        <FormLabel>Username</FormLabel>\n        <Input\n          type=\"text\"\n          placeholder=\"Username\"\n          {...register(\"username\")}\n          autoComplete=\"username\"\n        />\n        <FormErrorMessage>{errors?.username?.message}</FormErrorMessage>\n        {/* <FormHelperText>User: demo / Password: demodemo</FormHelperText> */}\n      </FormControl>\n      <FormControl\n        isInvalid={!!errors?.password?.message}\n        px=\"4\"\n        pb=\"4\"\n        isRequired>\n        <FormLabel>Password</FormLabel>\n        <Input\n          {...register(\"password\")}\n          type=\"password\"\n          placeholder=\"Password\"\n          autoComplete=\"current-password\"\n        />\n        <FormErrorMessage>{errors?.password?.message}</FormErrorMessage>\n        <FormErrorMessage>{errors?.apiError?.message}</FormErrorMessage>\n      </FormControl>\n      <Button\n        type=\"submit\"\n        p=\"4\"\n        mx=\"4\"\n        mt=\"6\"\n        w=\"90%\"\n        colorScheme=\"blue\"\n        variant=\"solid\"\n        disabled={!!errors.username || !!errors.password}\n        isLoading={isLoading === true}\n        loadingText=\"loading\">\n        Login\n      </Button>\n    </form>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Flex,\n  Avatar,\n  HStack,\n  IconButton,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  useDisclosure,\n  useColorModeValue,\n  Stack,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Text,\n  MenuOptionGroup,\n  VStack,\n  MenuItemOption\n} from \"@chakra-ui/react\";\nimport { HamburgerIcon, CloseIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { userService } from \"../services/userService\";\nimport { LoginForm } from \"./LoginForm\";\nimport { HandoverGroup, LoginResponse } from \"../services/typescript-axios\";\nimport { Link } from \"react-router-dom\";\nimport { FaHandsHelping, FaHome } from \"react-icons/fa\";\nimport { apiService } from \"src/services/axiosService\";\nimport { handovergroupService } from \"src/services/handoverGroupService\";\nexport { NavBar };\n\nfunction NavBar() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [user, setUser] = useState<LoginResponse>();\n  const [userGroup, setUserGroup] = useState<HandoverGroup>();\n  const [groupList, setGroupList] = useState<HandoverGroup[]>();\n\n  useEffect(() => {\n    if (user && user.token) \n      apiService.handover\n      .handoverGetHandoverGroups({ withCredentials: true })\n      .then((g) => {\n        setGroupList(g.data);\n        handovergroupService.send(g.data[0]);\n      })\n      .catch((err) => {\n        userService.logout();\n      });\n  }, [user]);\n\n  useEffect(() => {\n    const userSubject = userService.user.subscribe((x) => setUser(x));\n    return () => {\n      userSubject.unsubscribe();\n    };\n  }, []);\n  useEffect(() => {\n      const groupSubject = handovergroupService.subject.subscribe((x) =>\n        setUserGroup(x)\n      );\n      return () => {\n        groupSubject.unsubscribe();\n      };\n  }, []);\n\n  function logout() {\n    userService.logout();\n  }\n\n  function GroupButton() {\n    return (\n      <Box>\n        <Menu>\n          <MenuButton as={Button} colorScheme=\"gray\" variant=\"ghost\">\n            {userGroup?.groupName}\n            <ChevronDownIcon />\n          </MenuButton>\n          <MenuList>\n            <MenuOptionGroup\n              title=\"Groups\"\n              type=\"radio\"\n              onChange={(v) => {\n                handovergroupService.send(\n                  groupList?.find((g) => g.id.toString() === v) as HandoverGroup\n                );\n              }}>\n              {groupList?.map((v, i, a) => {\n                return (\n                  <MenuItemOption value={v.id.toString()} key={v.id}>\n                    {v.groupName}\n                  </MenuItemOption>\n                );\n              })}\n            </MenuOptionGroup>\n          </MenuList>\n        </Menu>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box bg={useColorModeValue(\"cyan.50\", \"cyan.900\")} px={4}>\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <IconButton\n            size={\"md\"}\n            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n            aria-label={\"Open Menu\"}\n            display={{ md: \"none\" }}\n            onClick={isOpen ? onClose : onOpen}\n          />\n          <HStack spacing={8} alignItems={\"center\"}>\n            <HStack spacing={2}>\n              <Box sx={{ left: \"10px\" }} color={\"cyan.900\"}>\n                <FaHandsHelping size={\"28px\"} />\n              </Box>\n              <VStack spacing={0} align={\"right\"}>\n                <Text fontSize={\"xl\"} color={\"cyan.900\"}>\n                  Smart Clinical Handover\n                </Text>\n                <Text\n                  fontSize=\"xs\"\n                  textAlign={\"right\"}\n                  lineHeight={\"0\"}\n                  color={\"gray.200\"}>\n                  {process.env.REACT_APP_ENV?.toString()}\n                </Text>\n              </VStack>\n            </HStack>\n\n            <HStack\n              as={\"nav\"}\n              spacing={4}\n              display={{ base: \"none\", md: \"flex\" }}>\n              <Link to={\"home\"}>\n                <Box sx={{ left: \"10px\" }} color={\"cyan.900\"}>\n                  <FaHome size={\"28px\"} />\n                </Box>\n              </Link>\n              <GroupButton></GroupButton>\n            </HStack>\n          </HStack>\n          <Flex alignItems={\"center\"} gap={4}>\n            <Menu>\n              <MenuButton\n                as={Button}\n                rounded={\"full\"}\n                variant={\"link\"}\n                cursor={\"pointer\"}\n                minW={0}>\n                <Avatar size={\"sm\"} src={\"\"} />\n              </MenuButton>\n              <MenuList>\n                <MenuItem>{user?.person?.displayName}</MenuItem>\n                <MenuDivider />\n                <MenuItem onClick={logout}>Logout </MenuItem>\n              </MenuList>\n            </Menu>\n          </Flex>\n        </Flex>\n\n        {isOpen ? (\n          <Box pb={4} display={{ md: \"none\" }}>\n            <Stack as={\"nav\"} spacing={4}>\n              <Link to={\"home\"}>\n                <Button>{\"Home\"}</Button>\n              </Link>\n              <GroupButton></GroupButton>\n            </Stack>\n          </Box>\n        ) : null}\n\n        <Modal isOpen={!user?.token} onClose={() => {}}>\n          <ModalOverlay blur={\"100px\"} />\n          <ModalContent>\n            <ModalHeader>Login</ModalHeader>\n            <ModalBody>\n              <LoginForm></LoginForm>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </ModalContent>\n        </Modal>\n      </Box>\n    </>\n  );\n}\n","import theme from \"@chakra-ui/theme\";\nimport { extendTheme } from \"@chakra-ui/react\";\n\nconst customTheme = theme;\n\nconst Textarea = {\n  baseStyle: {\n    background: \"white\",\n    backgroundColor: \"white\",\n    _focus: {\n      backgroundColor: \"white\"\n    }\n  }\n};\nconst Input = {\n  parts: {\n    field: \"the input field itself\",\n    addon: \"the left and right input addon\"\n  },\n  baseStyle: {\n    field: {\n      bg: \"white\",\n      _focus: {\n        bg: \"white\"\n      }\n    }\n  },\n  variants: {\n    outline: {\n      field: {\n        bg: \"white\"\n      }\n    },\n    filled: {\n      field: {\n        _focus: {\n          bg: \"white\"\n        },\n        _hover: {\n          bg: \"white\"\n        }\n      }\n    }\n  },\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\"\n  }\n};\n\nconst Menu = {\n  baseStyle: {\n    list: {\n      zIndex: 81\n    }\n  }\n};\n\nexport default extendTheme({\n  components: {\n    Menu,\n    Textarea,\n    Input\n  }\n});\n","import * as React from \"react\";\nimport JqxGrid, {\n  IGridProps,\n  jqx\n} from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\n\nimport { userService } from \"../../services/userService\";\nimport _, { omit } from \"lodash\";\nimport { getPatientService } from \"src/services/getPatientService\";\nimport { GetWardPatient } from \"src/services/typescript-axios\";\nimport { handovergroupService } from \"src/services/handoverGroupService\";\n\nclass PatientGrid extends React.PureComponent<{}, IGridProps | any> {\n  private myGrid = React.createRef<JqxGrid>();\n\n  constructor(props: {}) {\n    super(props);\n    this.onFetch = this.onFetch.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onBinding = this.onBinding.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.clearSelection = this.clearSelection.bind(this);\n    this.refresh = _.debounce(this.refresh.bind(this),300);\n    this.clear = this.clear.bind(this);\n\n    this.state = {\n      isDrawer: false, \n      selectedRow: null,\n      rowsheight: 30,\n      columns: [\n        {\n          text: \"logDate\",\n          datafield: \"updateDate\",\n          cellsformat: \"yyyy-MM-dd HH:mm\",\n          width: \"120px\",\n          sortable: false,\n          filterable: false\n        },\n        { text: \"patientName\", datafield: \"patientName\" },\n        {\n          text: \"specialtyCode\",\n          datafield: \"specialtyCode\",\n          width: \"120px\"\n        },        \n        { text: \"wardCode\", datafield: \"wardCode\", width: \"120px\" },\n        { text: \"bedNumber\", datafield: \"bedNumber\", width: \"120px\" },\n        {\n          text: \"admissionTime\",\n          datafield: \"admissionTime\",\n          cellsformat: \"yyyy-MM-dd\",\n          width: \"200px\"\n        },\n        { text: \"caseNumber\", datafield: \"caseNumber\", width: \"200px\" }\n      ],\n      source: new jqx.dataAdapter({\n        datafields: [\n          { name: \"updateDate\", type: \"date\", format: \"yyyy-MM-ddTHH:mm:ssZ\"  },\n          { name: \"dob\", type: \"date\", format: \"yyyy-MM-dd\"  },\n          { name: \"sex\", type: \"string\" },\n          { name: \"patientKey\", type: \"string\" },\n          { name: \"patientName\", type: \"string\" },\n          { name: \"wardCode\", type: \"string\" },\n          { name: \"specialtyCode\", type: \"string\" },\n          { name: \"bedNumber\", type: \"string\" },\n          { name: \"admissionTime\", type: \"date\", format: \"yyyy-MM-ddTHH:mm:ssZ\"  },\n          { name: \"caseNumber\", type: \"string\" }\n        ],\n        totalrecords: 0,\n        datatype: \"json\",\n        id: \"patientKey\",\n        root: \"rows\",\n        sortcolumn: \"bedNumber\",\n        sortdirection: \"asc\",\n        url: `${process.env.REACT_APP_API}/api/Pmi/QueryPatient`,\n        loadError(jqXHR: any, status: any, error: any) {\n\n        },\n        beforeSend: function (jqXHR: any, settings: any) {\n          let token = userService.userValue?.token;\n          jqXHR.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n        },\n        beforeprocessing: function (data: any) {\n          this.totalrecords = data.totalRows;\n        },\n        processdata: function (data: any) {\n          data.specialtyCode =handovergroupService.groupValue.specialtyCode;\n        }\n      })\n    };\n  }\n\n  public render() {\n    return (\n      <JqxGrid\n        theme={\"material\"}\n        ref={this.myGrid}\n        onFilter={this.onFetch}\n        // onPagechanged={this.onFetch}\n        // onPagesizechanged={this.onFetch}\n        onSort={this.onFetch}\n        onCellclick={this.onSelect}\n        rendergridrows={this.onRender}\n        onBindingcomplete={this.onBinding}\n        source={this.state.source}\n        columns={this.state.columns}\n        pageable={true}\n        pagesize={5}\n        altrows={true}\n        sortable={true}\n        columnsresize={true}\n        filterable={true}\n        virtualmode={true}\n        autoheight={true}\n        selectionmode={\"singlerow\"}\n        autoshowfiltericon={false}\n        updatedelay={20}\n        rowsheight={this.state.rowsheight}\n        width={\"100%\"}\n        scrollmode={\"deferred\"}\n      />\n    );\n  }\n\n  private onBinding(e: any) {\n    this.myGrid.current!.setOptions({ rowsheight: this.state.rowsheight });\n  }\n\n  private onRender(obj: any) {\n    return obj.data;\n  }\n  private getSelected() {\n    const selected = this.myGrid.current!.getselectedrowindex();\n    return selected;\n  }\n\n  private onFetch(e: any): void {\n    this.myGrid.current!.updatebounddata(e.handleObj.type);\n    this.myGrid.current!.setOptions({ rowsheight: this.state.rowsheight });\n  }\n\n  private onSelect(e: any) {\n    let selected = this.myGrid.current?.getrowdatabyid(e?.args?.row?.bounddata.patientKey);\n    getPatientService.send(\n      omit(  selected, ['boundindex', 'uid', 'uniqueid', 'visibleindex']) as GetWardPatient\n    );\n  }\n  public clearSelection() {\n    this.myGrid.current!.clearselection();\n  }    \n  public refresh() {\n    this.myGrid.current?.updatebounddata();\n    try {\n      this.myGrid.current?.clearselection();\n    } catch (e) {}\n  }\n\n  public clear () {\n    this.myGrid.current?.clear();\n  }\n}\n\nexport { PatientGrid };\n","import { Input, Button, InputRightAddon, InputGroup } from \"@chakra-ui/react\";\nimport { CalendarIcon } from \"@chakra-ui/icons\";\nimport { forwardRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const localDate = (dt?:Date)=>{\n  if(dt)\n  return new Date(dt.valueOf() + dt.getTimezoneOffset() * 60 * 1000);\n  return dt;\n}\n\nexport const DateInputGroup = forwardRef(\n  (\n    //@ts-ignore\n    { value, onClick, disabled, readOnly, onChange, ...props },\n    ref\n  ) => {\n    return(\n    <InputGroup size={\"sm\"}>\n      <Input\n        value={value}\n        isReadOnly={readOnly}  \n        size={\"sm\"}\n        fontSize={\"sm\"}\n        backgroundColor={readOnly ? \"gray.100\" : \"white\"}\n        onChange={onChange}\n      />\n      <InputRightAddon\n        onClick={onClick}\n        as={Button} \n        isDisabled={disabled || readOnly}\n      >\n        <CalendarIcon />\n      </InputRightAddon>\n    </InputGroup>\n  )}\n);\n\nconst propTypes = {\n  adjustDateOnChange: PropTypes.bool,\n  allowSameDay: PropTypes.bool,\n  ariaDescribedBy: PropTypes.string,\n  ariaInvalid: PropTypes.string,\n  ariaLabelClose: PropTypes.string,\n  ariaLabelledBy: PropTypes.string,\n  ariaRequired: PropTypes.string,\n  autoComplete: PropTypes.string,\n  autoFocus: PropTypes.bool,\n  calendarClassName: PropTypes.string,\n  calendarContainer: PropTypes.func,\n  children: PropTypes.node,\n  chooseDayAriaLabelPrefix: PropTypes.string,\n  closeOnScroll: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  className: PropTypes.string,\n  customInput: PropTypes.element,\n  customInputRef: PropTypes.string,\n  calendarStartDay: PropTypes.number,\n  // eslint-disable-next-line react/no-unused-prop-types\n  dateFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  dateFormatCalendar: PropTypes.string,\n  dayClassName: PropTypes.func,\n  weekDayClassName: PropTypes.func,\n  disabledDayAriaLabelPrefix: PropTypes.string,\n  monthClassName: PropTypes.func,\n  timeClassName: PropTypes.func,\n  disabled: PropTypes.bool,\n  disabledKeyboardNavigation: PropTypes.bool,\n  dropdownMode: PropTypes.oneOf([\"scroll\", \"select\"]).isRequired,\n  endDate: PropTypes.instanceOf(Date),\n  excludeDates: PropTypes.array,\n  excludeDateIntervals: PropTypes.arrayOf(\n    PropTypes.shape({\n      start: PropTypes.instanceOf(Date),\n      end: PropTypes.instanceOf(Date)\n    })\n  ),\n  filterDate: PropTypes.func,\n  fixedHeight: PropTypes.bool,\n  formatWeekNumber: PropTypes.func,\n  highlightDates: PropTypes.array,\n  id: PropTypes.string,\n  includeDates: PropTypes.array,\n  includeDateIntervals: PropTypes.array,\n  includeTimes: PropTypes.array,\n  injectTimes: PropTypes.array,\n  inline: PropTypes.bool,\n  isClearable: PropTypes.bool,\n  locale: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({ locale: PropTypes.object })\n  ]),\n  maxDate: PropTypes.instanceOf(Date),\n  minDate: PropTypes.instanceOf(Date),\n  monthsShown: PropTypes.number,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  onSelect: PropTypes.func,\n  onWeekSelect: PropTypes.func,\n  onClickOutside: PropTypes.func,\n  onChangeRaw: PropTypes.func,\n  onFocus: PropTypes.func,\n  onInputClick: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onMonthChange: PropTypes.func,\n  onYearChange: PropTypes.func,\n  onInputError: PropTypes.func,\n  open: PropTypes.bool,\n  onCalendarOpen: PropTypes.func,\n  onCalendarClose: PropTypes.func,\n  openToDate: PropTypes.instanceOf(Date),\n  peekNextMonth: PropTypes.bool,\n  placeholderText: PropTypes.string,\n  popperContainer: PropTypes.func,\n  popperClassName: PropTypes.string, // <PopperComponent/> props\n  popperModifiers: PropTypes.arrayOf(PropTypes.object), // <PopperComponent/> props\n  //popperPlacement: PropTypes.oneOf(popperPlacementPositions), // <PopperComponent/> props\n  popperProps: PropTypes.object,\n  preventOpenOnFocus: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  required: PropTypes.bool,\n  scrollableYearDropdown: PropTypes.bool,\n  scrollableMonthYearDropdown: PropTypes.bool,\n  selected: PropTypes.instanceOf(Date),\n  selectsEnd: PropTypes.bool,\n  selectsStart: PropTypes.bool,\n  selectsRange: PropTypes.bool,\n  selectsDisabledDaysInRange: PropTypes.bool,\n  showMonthDropdown: PropTypes.bool,\n  showPreviousMonths: PropTypes.bool,\n  showMonthYearDropdown: PropTypes.bool,\n  showWeekNumbers: PropTypes.bool,\n  showYearDropdown: PropTypes.bool,\n  strictParsing: PropTypes.bool,\n  forceShowMonthNavigation: PropTypes.bool,\n  showDisabledMonthNavigation: PropTypes.bool,\n  startDate: PropTypes.instanceOf(Date),\n  startOpen: PropTypes.bool,\n  tabIndex: PropTypes.number,\n  timeCaption: PropTypes.string,\n  title: PropTypes.string,\n  todayButton: PropTypes.node,\n  useWeekdaysShort: PropTypes.bool,\n  formatWeekDay: PropTypes.func,\n  value: PropTypes.string,\n  weekLabel: PropTypes.string,\n  withPortal: PropTypes.bool,\n  portalId: PropTypes.string,\n  portalHost: PropTypes.instanceOf(ShadowRoot),\n  yearItemNumber: PropTypes.number,\n  yearDropdownItemNumber: PropTypes.number,\n  shouldCloseOnSelect: PropTypes.bool,\n  showTimeInput: PropTypes.bool,\n  showMonthYearPicker: PropTypes.bool,\n  showFullMonthYearPicker: PropTypes.bool,\n  showTwoColumnMonthYearPicker: PropTypes.bool,\n  showFourColumnMonthYearPicker: PropTypes.bool,\n  showYearPicker: PropTypes.bool,\n  showQuarterYearPicker: PropTypes.bool,\n  showTimeSelect: PropTypes.bool,\n  showTimeSelectOnly: PropTypes.bool,\n  timeFormat: PropTypes.string,\n  timeIntervals: PropTypes.number,\n  minTime: PropTypes.instanceOf(Date),\n  maxTime: PropTypes.instanceOf(Date),\n  excludeTimes: PropTypes.array,\n  filterTime: PropTypes.func,\n  useShortMonthInDropdown: PropTypes.bool,\n  clearButtonTitle: PropTypes.string,\n  clearButtonClassName: PropTypes.string,\n  previousMonthAriaLabel: PropTypes.string,\n  previousMonthButtonLabel: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.node\n  ]),\n  nextMonthAriaLabel: PropTypes.string,\n  nextMonthButtonLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  previousYearAriaLabel: PropTypes.string,\n  previousYearButtonLabel: PropTypes.string,\n  nextYearAriaLabel: PropTypes.string,\n  nextYearButtonLabel: PropTypes.string,\n  timeInputLabel: PropTypes.string,\n  renderCustomHeader: PropTypes.func,\n  renderDayContents: PropTypes.func,\n  wrapperClassName: PropTypes.string,\n  focusSelectedMonth: PropTypes.bool,\n  onDayMouseEnter: PropTypes.func,\n  onMonthMouseLeave: PropTypes.func,\n  showPopperArrow: PropTypes.bool,\n  excludeScrollbar: PropTypes.bool,\n  enableTabLoop: PropTypes.bool,\n  customTimeInput: PropTypes.element,\n  weekAriaLabelPrefix: PropTypes.string\n};\n","import {\n  VStack,\n  FormLabel,\n  Flex,\n  createStandaloneToast,\n  Button,\n  Icon,\n  Popover,\n  PopoverTrigger,\n  Portal,\n  PopoverContent,\n  PopoverHeader,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverFooter,\n  HStack\n} from \"@chakra-ui/react\";\nimport { Stat, StatLabel, StatHelpText, Spinner } from \"@chakra-ui/react\";\nimport { Radio, RadioGroup } from \"@chakra-ui/react\";\nimport { format } from \"date-fns\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { apiService } from \"src/services/axiosService\";\nimport { HandoverLog } from \"../services/typescript-axios\";\nimport { delay, from, map, catchError, throwError } from \"rxjs\";\nimport { FiXSquare } from \"react-icons/fi\";\nimport { handoverlogService } from \"src/services/handoverlogService\";\nimport { getPatientService } from \"src/services/getPatientService\";\nimport { handoverService } from \"src/services/handoverService\";\nimport { localDate } from \"./input/DateInputGroup\";\n\nfunction HandoverHistory(props: any) {\n  const [log, setLog] = useState<HandoverLog[]>();\n  const [select, setSelect] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<Boolean>(false);\n\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (log) {\n      let selectedLog = log as HandoverLog[];\n      handoverlogService.send(selectedLog[select]);\n    }\n  }, [select, log]);\n\n  useEffect(() => {\n    const subscription = getPatientService.subject.subscribe((x) => {\n      if (x?.patientKey !== undefined) {\n        setIsLoading(true);\n        handoverlogService.send({} as HandoverLog);\n        setLog([]);\n        let apiGetLog = apiService.handover.handoverGetHandoverLog(\n          x?.patientKey as string,\n          {\n            withCredentials: true\n          }\n        );\n\n        let r = from(apiGetLog).pipe(\n          delay(200),\n          map((h) => h),\n          catchError((err) => {\n            return throwError(() => {\n              return err;\n            });\n          })\n        );\n\n        let rxGetLogSubject = r.subscribe({\n          next(l) {\n            setLog(l.data);\n            if (l.data) {\n              for (let i = 0; i < l.data.length; i++) {\n                if (l.data[i].logText === \"Delete\") continue;\n                setSelect(i);\n                break;\n              }\n            }\n          },\n          error(err) {\n            setLog([]);\n            if (err.status === 401) {\n              const toast = createStandaloneToast();\n              toast({\n                title: `${err.status}`,\n                description: `${err.error}`,\n                status: \"error\",\n                duration: 500,\n                isClosable: true,\n                position: \"bottom-right\"\n              });\n            }\n            if (err.status === 404) {\n            }\n          },\n          complete() {\n            rxGetLogSubject.unsubscribe();\n            setIsLoading(false);\n          }\n        });\n      } else {\n        setLog([]);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const handleHistoryChange = (r) => {\n    setSelect(parseInt(r));\n  };\n\n  const handleDelete = (r) => {\n    let handoverId = handoverService.handoverValue.id;\n    apiService.handover\n      .handoverDeleteHandover(handoverId as string, {\n        withCredentials: true\n      })\n      .then(() => {\n        getPatientService.resend();\n        props.handleRefresh();\n      });\n  };\n\n  return (\n    <VStack\n      h={\"100%\"}\n      p={4}\n      backgroundColor={\"gray.50\"}\n      align={\"left\"}\n      border=\"2px\"\n      borderRadius=\"10px\"\n      borderColor=\"gray.500\">\n      <Flex justify=\"space-between\">\n        <FormLabel fontSize=\"xl\" fontWeight=\"bold\">\n          Log\n        </FormLabel>\n        {isLoading ? (\n          <Spinner\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            size=\"md\"\n          />\n        ) : (\n          <></>\n        )}\n      </Flex>\n      {log && log[0] ? (\n        <Popover>\n          {({ isOpen, onClose }) => (\n            <>\n              <PopoverTrigger>\n                <Button\n                  size={\"xs\"}\n                  colorScheme=\"red\"\n                  variant=\"ghost\"\n                  leftIcon={\n                    <Icon\n                      as={FiXSquare}\n                      w={6}\n                      h={6}\n                      stroke={\"red.600\"}\n                      fill={\"transparent\"}\n                    />\n                  }>\n                  {log[0]?.logText === \"Delete\"\n                    ? \"Deleted\"\n                    : \"Delete handover ?\"}\n                </Button>\n              </PopoverTrigger>\n              <Portal>\n                {log[0]?.logText === \"Delete\" ? (\n                  <></>\n                ) : (\n                  <PopoverContent>\n                    <PopoverHeader>Confirm to delete ?</PopoverHeader>\n                    <PopoverCloseButton />\n                    <PopoverBody>\n                      <HStack spacing={4}>\n                        <Button colorScheme=\"red\" onClick={handleDelete}>\n                          Yes\n                        </Button>\n                        <Button variant={\"outline\"} onClick={onClose}>\n                          No\n                        </Button>\n                      </HStack>\n                    </PopoverBody>\n                    <PopoverFooter>Exclude handover from report</PopoverFooter>\n                  </PopoverContent>\n                )}\n              </Portal>\n            </>\n          )}\n        </Popover>\n      ) : (\n        <></>\n      )}\n\n      <VStack overflowY={\"scroll\"} w=\"100%\" p={\"10px\"}>\n        <VStack spacing={4} direction=\"row\" justify={\"left\"} textAlign={\"left\"}>\n          <RadioGroup\n            ref={inputRef}\n            onChange={handleHistoryChange}\n            value={select}>\n            {log?.map(function (item, value) {\n              return (\n                <Radio\n                  value={value}\n                  key={value}\n                  isDisabled={item.logText === \"Delete\"}>\n                  <Stat textAlign={\"left\"}>\n                    <StatLabel>{item.logText}</StatLabel>\n                    <StatLabel>{item.logBy}</StatLabel>\n                    <StatHelpText>\n                      {format(localDate(item.logTime)as Date, \"yyyy-MM-dd HH:mm:ss\")}\n                    </StatHelpText>\n                  </Stat>\n                </Radio>\n              );\n            })}\n          </RadioGroup>\n        </VStack>\n      </VStack>\n    </VStack>\n  );\n}\n\nexport { HandoverHistory };\n","import {\n  FormLabel,\n  Input,\n  FormHelperText,\n  FormErrorMessage,\n  Grid,\n  Box,\n  Flex,\n  FormControl,\n  Textarea,\n  Button,\n  Stack,\n  VStack,\n  useBoolean,\n  GridItem,\n  Spinner,\n  createStandaloneToast,\n  Tooltip,\n  Icon\n} from \"@chakra-ui/react\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\nimport * as yup from \"yup\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { GetWardPatient, Handover } from \"../services/typescript-axios\";\nimport { apiService } from \"../services/axiosService\";\n\nimport DatePicker from \"react-datepicker\";\nimport { DateInputGroup, localDate } from \"./input/DateInputGroup\";\nimport { HandoverHistory } from \"./HandoverHistory\";\nimport { delay, from, map, catchError, throwError } from \"rxjs\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { GrClearOption } from \"react-icons/gr\";\nimport { useDebounce } from \"react-use\";\nimport { getPatientService } from \"src/services/getPatientService\";\nimport { handoverService } from \"src/services/handoverService\";\nimport { handoverlogService } from \"src/services/handoverlogService\";\nimport { handovergroupService } from \"src/services/handoverGroupService\";\nexport { HandoverForm };\n\ntype handoverInput = Handover & {\n  editedDate: Date;\n  groupName: string;\n};\nconst handoverSchema = yup.object({\n  id: yup.string(),\n  patientKey: yup.string(),\n  patientName: yup.string().required(\"Required\"),\n  dob: yup.date().nullable().notRequired(),\n  sex: yup.string(),\n  wardCode: yup.string(),\n  specialtyCode: yup.string(),\n  bedNumber: yup.string(),\n  admissionTime: yup.date().nullable().notRequired(),\n  caseNumber: yup.string(),\n  diagnosis: yup.string().required(\"Required\"),\n  background: yup.string().required(\"Required\"),\n  progress: yup.string(),\n  ix: yup.string(),\n  drugs: yup.string(),\n  recommendation: yup.string(),\n  editedBy: yup.string(),\n  editedDate: yup.date().notRequired(),\n  freeText: yup.string().nullable()\n});\nconst validateData = (v: any) => {\n  handoverSchema\n    .validate(v)\n    .then((data) => console.log(data))\n    .catch((err) => {\n      console.log(err);\n    });\n};\nfunction HandoverForm(props: any) {\n  const [isSubmit, setIsSubmit] = useBoolean(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isFreeText, setIsFreeText] = useState<boolean>(false);\n\n  const [patientKey, setPatientKey] = useState<string>();\n  const [handoverId, setHandoverId] = useState<string>();\n\n  const params = useParams();\n  const pid = params.patientKey;\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors, isDirty, isValid },\n    reset,\n    control,\n    setValue,\n    getValues\n  } = useForm<handoverInput>({\n    mode: \"onBlur\",\n    resolver: yupResolver(handoverSchema)\n  });\n\n  useEffect(() => {\n    if (pid && getPatientService.patientValue.patientKey !== pid) {\n      apiService.pmi.pmiGetPatient(pid, { withCredentials: true }).then((p) => {\n        getPatientService.send(p.data);\n      });\n    }\n    return () => {};\n  }, [pid]);\n\n  useEffect(() => {\n    if (handoverId && patientKey) {\n      setIsLoading(true);\n      let apiGetHistory = apiService.handover.handoverGetHandoverHistory(\n        patientKey,\n        handoverId,\n        {\n          withCredentials: true\n        }\n      );\n\n      let rxGetHistory = from(apiGetHistory).pipe(\n        delay(500),\n        map((h) => {\n          return h;\n        }),\n        catchError((err) => {\n          return throwError(() => new Error(err));\n        })\n      );\n\n      let rxGetHistorySubject = rxGetHistory.subscribe({\n        next(r) {\n          let h = r.data;\n          handoverService.send(h);\n          let groupName = handovergroupService.groupValue.groupName;\n          let x = getPatientService.patientValue;\n          reset({\n            wardCode: x.wardCode,\n            caseNumber: x.caseNumber,\n            bedNumber: x.bedNumber,\n            specialtyCode: x.specialtyCode,\n            patientName: x.patientName,\n            patientKey: x.patientKey,\n            sex: x.sex,\n            dob: x.dob,\n            admissionTime: x.admissionTime,\n            background: h.background,\n            diagnosis: h.diagnosis,\n            progress: h.progress,\n            ix: h.ix,\n            drugs: h.drugs,\n            recommendation: h.recommendation,\n            editedBy: h.editedBy,\n            editedDate: handoverlogService.logValue?.logTime,\n            freeText: h.freeText,\n            groupId: h.groupId,\n            groupName: groupName ? groupName : \"\"\n          });\n        },\n        error(err: Response) {\n          if (err.status === 401) {\n          }\n          if (err.status === 404) {\n          }\n        },\n        complete() {\n          rxGetHistorySubject.unsubscribe();\n          setIsLoading(false);\n        }\n      });\n    }\n  }, [handoverId, reset, patientKey]);\n\n  const [ready, cancel] = useDebounce(\n    () => {\n      if (patientKey) {\n        let x = getPatientService.patientValue;\n        if (x?.patientName) {\n          reset({\n            wardCode: x.wardCode,\n            caseNumber: x.caseNumber,\n            bedNumber: x.bedNumber,\n            specialtyCode: x.specialtyCode,\n            patientName: x.patientName,\n            patientKey: x.patientKey,\n            sex: x.sex,\n            dob: x.dob,\n            admissionTime: x.admissionTime,\n            background: \"\",\n            diagnosis: \"\",\n            progress: \"\",\n            ix: \"\",\n            drugs: \"\",\n            recommendation: \"\",\n            editedBy: \"\",\n            editedDate: undefined,\n            freeText: \"\",\n            groupId: undefined,\n            groupName: \"\"\n          });\n        }\n        navigate(\"/home/\" + x?.patientKey);\n      } else {\n        reset({\n          wardCode: \"\",\n          caseNumber: \"\",\n          bedNumber: \"\",\n          specialtyCode: \"\",\n          patientName: \"\",\n          patientKey: \"\",\n          sex: \"\",\n          dob: undefined,\n          admissionTime: undefined,\n          background: \"\",\n          diagnosis: \"\",\n          progress: \"\",\n          ix: \"\",\n          drugs: \"\",\n          recommendation: \"\",\n          editedBy: \"\",\n          editedDate: undefined,\n          freeText: \"\",\n          groupId: undefined,\n          groupName: \"\"\n        });\n        navigate(\"/home/\");\n      }\n    },\n    500,\n    [patientKey]\n  );\n\n  useEffect(() => {\n    const patientSubscriber = getPatientService.subject.subscribe((x) => {\n      setHandoverId(undefined);\n      setPatientKey(x?.patientKey);\n    });\n\n    const logSubscriber = handoverlogService.subject.subscribe((l) => {\n      if (patientKey && l?.id) {\n        setHandoverId(l?.id);\n      }\n    });\n\n    return () => {\n      patientSubscriber.unsubscribe();\n      logSubscriber.unsubscribe();\n    };\n  }, [navigate, reset, patientKey]);\n\n  const onSubmit = (values: handoverInput) => {\n    let api = apiService.handover;\n    setIsSubmit.on();\n    values.groupId = handovergroupService.groupValue.id;\n    api\n      .handoverPostHandover(values, values.groupId, {\n        withCredentials: true\n      })\n      .then((h) => {\n        getPatientService.resend();\n        setIsSubmit.off();\n        const toast = createStandaloneToast();\n        toast({\n          title: `Success`,\n          description: `Saved`,\n          status: \"success\",\n          duration: 500,\n          isClosable: true,\n          position: \"bottom-right\"\n        });\n        props.handleRefresh();\n      });\n  };\n\n  const handleClearAll = () => {\n    getPatientService.send({} as GetWardPatient);\n  };\n\n  const setBackgroundColor = useMemo(() => {\n    return isFreeText ? \"white\" : \"gray.100\";\n  }, [isFreeText]);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input\n        type={\"hidden\"}\n        isReadOnly\n        size={\"sm\"}\n        fontSize={\"sm\"}\n        {...register(\"groupId\")}\n        backgroundColor={\"gray.100\"}\n      />\n      <Flex direction={{ base: \"column\", lg: \"row\" }}>\n        <Box flex={2}>\n          <Box backgroundColor=\"white\" mb={2}>\n            <Stack spacing={2}>\n              <Flex justify=\"space-between\">\n                <Stack direction=\"row\" spacing={4}></Stack>\n                <Stack direction=\"row\" spacing={4}>\n                  <Tooltip\n                    hasArrow\n                    label=\"Reset handover form\"\n                    aria-label=\"Reset handover form\">\n                    <Button\n                      onClick={handleClearAll}\n                      leftIcon={\n                        <Icon\n                          as={GrClearOption}\n                          w={6}\n                          h={6}\n                          stroke={\"yellow.600\"}\n                          fill={\"transparent\"}\n                        />\n                      }\n                      colorScheme=\"yellow\"\n                      variant=\"ghost\">\n                      Clear form\n                    </Button>\n                  </Tooltip>\n\n                  <Stack align=\"center\" direction=\"row\"></Stack>\n\n                  <Button\n                    w={\"140px\"}\n                    isDisabled={!(isDirty && isValid)}\n                    isLoading={isSubmit}\n                    leftIcon={<CheckIcon />}\n                    colorScheme=\"green\"\n                    variant=\"solid\"\n                    type=\"submit\">\n                    Save\n                  </Button>\n                </Stack>\n              </Flex>\n              <VStack\n                backgroundColor={\"teal.50\"}\n                align={\"left\"}\n                pl={2}\n                pr={2}\n                pb={2}\n                border=\"2px\"\n                borderRadius=\"10px\"\n                borderColor=\"teal.500\">\n                <Flex justify={\"space-between\"}>\n                  <FormLabel fontSize=\"lg\" mb={0} fontWeight=\"bold\">\n                    Handover\n                  </FormLabel>\n                  {isLoading ? (\n                    <Spinner\n                      thickness=\"4px\"\n                      speed=\"0.65s\"\n                      emptyColor=\"gray.200\"\n                      color=\"blue.500\"\n                      size=\"md\"\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </Flex>\n                <Grid\n                  templateColumns={{\n                    md: \"1fr 1fr 1fr\",\n                    lg: \"1fr 2fr 2fr\"\n                  }}\n                  gap={2}>\n                  <FormControl\n                    isReadOnly\n                    isInvalid={!!errors?.editedBy?.message}>\n                    <FormLabel fontSize={\"sm\"}>{\"Edited By\"}</FormLabel>\n                    <Input\n                      isReadOnly\n                      size={\"sm\"}\n                      fontSize={\"sm\"}\n                      {...register(\"editedBy\")}\n                      backgroundColor={\"gray.100\"}\n                    />\n                    <FormErrorMessage fontSize={\"sm\"}>\n                      {errors?.editedBy?.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                  <FormControl\n                    isReadOnly\n                    isInvalid={!!errors?.editedDate?.message}>\n                    <FormLabel fontSize={\"sm\"}>{\"Edited Date\"}</FormLabel>\n                    <Controller\n                      control={control}\n                      name=\"editedDate\"\n                      render={({ field: { onChange, onBlur, value, ref } }) => {\n                        return (\n                          <DatePicker\n                            disabled={true}\n                            readOnly={true}\n                            onChange={onChange} // send value to hook form\n                            onBlur={onBlur} // notify when input is touched/blur\n                            selected={localDate(value)}\n                            customInput={<DateInputGroup />}\n                            dateFormat={\"yyyy-MM-dd HH:mm:ss\"}\n                          />\n                        );\n                      }}\n                    />\n                    <FormErrorMessage fontSize={\"sm\"}>\n                      {errors?.editedDate?.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                  <FormControl\n                    isReadOnly\n                    isInvalid={!!errors?.groupId?.message}>\n                    <FormLabel fontSize={\"sm\"}>{\"Group\"}</FormLabel>\n                    <Input\n                      isReadOnly\n                      size={\"sm\"}\n                      fontSize={\"sm\"}\n                      {...register(\"groupName\")}\n                      backgroundColor={\"gray.100\"}\n                    />\n                    <FormErrorMessage fontSize={\"sm\"}>\n                      {errors?.groupId?.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                </Grid>\n              </VStack>\n\n              <VStack\n                backgroundColor={\"gray.50\"}\n                align={\"left\"}\n                pl={2}\n                pr={2}\n                border=\"2px\"\n                borderRadius=\"10px\"\n                borderColor=\"gray.500\">\n                <FormLabel fontSize=\"lg\" mb={0} fontWeight=\"bold\">\n                  Identification\n                </FormLabel>\n                <Grid\n                  templateColumns={{\n                    md: \"1fr 1fr 1fr\",\n                    lg: \"1fr 1fr 1fr 1fr 1fr\"\n                  }}\n                  gap={2}>\n                  <FormControl\n                    isReadOnly={!isFreeText}\n                    isInvalid={!!errors?.caseNumber?.message}>\n                    <FormLabel fontSize={\"sm\"}>{\"Case Number\"}</FormLabel>\n                    <Input\n                      isReadOnly={!isFreeText}\n                      size={\"sm\"}\n                      {...register(\"caseNumber\")}\n                      backgroundColor={setBackgroundColor}\n                    />\n                    <FormErrorMessage fontSize={\"sm\"}>\n                      {errors?.caseNumber?.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                  <GridItem colSpan={{ sm: 1, md: 2 }}>\n                    <FormControl\n                      isRequired\n                      isReadOnly={!isFreeText}\n                      isInvalid={!!errors?.patientName?.message}>\n                      <FormLabel fontSize={\"sm\"}>Patient Name</FormLabel>\n                      <Input\n                        isReadOnly={!isFreeText}\n                        size={\"sm\"}\n                        {...register(\"patientName\")}\n                        backgroundColor={setBackgroundColor}\n                      />\n                      <FormErrorMessage>\n                        {errors?.patientName?.message}\n                      </FormErrorMessage>\n                    </FormControl>\n                  </GridItem>\n                  <FormControl\n                    isReadOnly={!isFreeText}\n                    isInvalid={!!errors?.wardCode?.message}>\n                    <FormLabel fontSize={\"sm\"}>{\"Ward\"}</FormLabel>\n                    <Input\n                      isReadOnly={!isFreeText}\n                      size={\"sm\"}\n                      {...register(\"wardCode\")}\n                      backgroundColor={setBackgroundColor}\n                    />\n                    <FormErrorMessage fontSize={\"sm\"}>\n                      {errors?.wardCode?.message}\n                    </FormErrorMessage>\n                  </FormControl>\n\n                  <FormControl\n                    isReadOnly={!isFreeText}\n                    isInvalid={!!errors?.specialtyCode?.message}>\n                    <FormLabel fontSize={\"sm\"}>{\"Specialty\"}</FormLabel>\n                    <Input\n                      isReadOnly={!isFreeText}\n                      size={\"sm\"}\n                      {...register(\"specialtyCode\")}\n                      backgroundColor={setBackgroundColor}\n                    />\n                    <FormErrorMessage fontSize={\"sm\"}>\n                      {errors?.specialtyCode?.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                  <FormControl\n                    isReadOnly={!isFreeText}\n                    isInvalid={!!errors?.bedNumber?.message}>\n                    <FormLabel fontSize={\"sm\"}>{\"Bed\"}</FormLabel>\n                    <Input\n                      isReadOnly={!isFreeText}\n                      size={\"sm\"}\n                      {...register(\"bedNumber\")}\n                      backgroundColor={setBackgroundColor}\n                    />\n                    <FormErrorMessage fontSize={\"sm\"}>\n                      {errors?.bedNumber?.message}\n                    </FormErrorMessage>\n                  </FormControl>\n\n                  <GridItem colSpan={{ md: 1, lg: 2 }}>\n                    <FormControl\n                      isReadOnly\n                      isInvalid={!!errors?.admissionTime?.message}>\n                      <FormLabel fontSize={\"sm\"}>Admission</FormLabel>\n                      <Controller\n                        control={control}\n                        name=\"admissionTime\"\n                        render={({\n                          field: { onChange, onBlur, value, ref }\n                        }) => (\n                          <DatePicker\n                            disabled={!isFreeText}\n                            readOnly={!isFreeText}\n                            onChange={onChange} // send value to hook form\n                            onBlur={onBlur} // notify when input is touched/blur\n                            selected={localDate(value)}\n\n                            customInput={<DateInputGroup />}\n                            dateFormat={\"yyyy-MM-dd HH:mm\"}\n                          />\n                        )}\n                      />\n                      <FormErrorMessage>\n                        {errors?.admissionTime?.message}\n                      </FormErrorMessage>\n                      <FormHelperText></FormHelperText>\n                    </FormControl>\n                  </GridItem>\n\n                  <FormControl\n                    isReadOnly={!isFreeText}\n                    isInvalid={!!errors?.sex?.message}>\n                    <FormLabel fontSize={\"sm\"}>Sex</FormLabel>\n                    <Input\n                      isReadOnly={!isFreeText}\n                      size={\"sm\"}\n                      {...register(\"sex\")}\n                      backgroundColor={setBackgroundColor}\n                    />\n                    <FormErrorMessage>{errors?.sex?.message}</FormErrorMessage>\n                    <FormHelperText></FormHelperText>\n                  </FormControl>\n                  <FormControl\n                    isReadOnly={!isFreeText}\n                    isInvalid={!!errors?.dob?.message}>\n                    <FormLabel fontSize={\"sm\"}>DOB</FormLabel>\n                    <Controller\n                      control={control}\n                      name=\"dob\"\n                      render={({ field: { onChange, onBlur, value, ref } }) => (\n                        <DatePicker\n                          disabled={!isFreeText}\n                          readOnly={!isFreeText}\n                          onChange={onChange} // send value to hook form\n                          onBlur={onBlur} // notify when input is touched/blur\n                          selected={localDate(value)}\n\n                          customInput={<DateInputGroup />}\n                          dateFormat={\"yyyy-MM-dd\"}\n                        />\n                      )}\n                    />\n                    <FormErrorMessage>{errors?.dob?.message}</FormErrorMessage>\n                    <FormHelperText></FormHelperText>\n                  </FormControl>\n                </Grid>\n                {isFreeText || getValues(\"freeText\") ? (\n                  <FormControl isInvalid={!!errors?.freeText?.message}>\n                    <Flex>\n                      <FormLabel fontSize={\"sm\"}>{\"Notes\"}</FormLabel>\n                    </Flex>\n                    <Textarea {...register(\"freeText\")} />\n                    <FormErrorMessage>\n                      {errors?.freeText?.message}\n                    </FormErrorMessage>\n                    <FormHelperText></FormHelperText>\n                  </FormControl>\n                ) : (\n                  <></>\n                )}\n              </VStack>\n            </Stack>\n          </Box>\n          <Box backgroundColor=\"white\" mb={2}>\n            <Stack spacing={2}>\n              <Stack\n                pl={2}\n                pr={2}\n                border=\"2px\"\n                borderRadius=\"10px\"\n                borderColor=\"orange.500\"\n                backgroundColor={\"orange.50\"}>\n                <FormLabel fontSize=\"lg\" mb={0} fontWeight=\"bold\">\n                  Situation\n                </FormLabel>\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors?.diagnosis?.message}>\n                  <Flex>\n                    <FormLabel fontSize={\"sm\"}>{\"Diagnosis\"}</FormLabel>\n                  </Flex>\n\n                  <Textarea {...register(\"diagnosis\")} />\n                  <FormErrorMessage>\n                    {errors?.diagnosis?.message}\n                  </FormErrorMessage>\n                  <FormHelperText></FormHelperText>\n                </FormControl>\n              </Stack>\n\n              <Stack\n                pl={2}\n                pr={2}\n                border=\"2px\"\n                borderRadius=\"10px\"\n                borderColor=\"blue.500\"\n                backgroundColor={\"blue.50\"}>\n                <FormLabel fontSize=\"lg\" mb={0} fontWeight=\"bold\">\n                  Background & Assessment\n                </FormLabel>\n\n                <Grid templateColumns={\"1fr 1fr\"} gap={2}>\n                  <FormControl\n                    isRequired\n                    isInvalid={!!errors?.background?.message}>\n                    <FormLabel fontSize={\"sm\"}>Background</FormLabel>\n                    <Textarea {...register(\"background\")} />\n                    <FormErrorMessage>\n                      {errors?.background?.message}\n                    </FormErrorMessage>\n                    <FormHelperText></FormHelperText>\n                  </FormControl>\n                  <FormControl isInvalid={!!errors?.progress?.message}>\n                    <FormLabel fontSize={\"sm\"}>Progress</FormLabel>\n                    <Textarea {...register(\"progress\")} />\n                    <FormErrorMessage>\n                      {errors?.progress?.message}\n                    </FormErrorMessage>\n                    <FormHelperText></FormHelperText>\n                  </FormControl>\n                  <FormControl isInvalid={!!errors?.ix?.message}>\n                    <FormLabel fontSize={\"sm\"}>Ix</FormLabel>\n                    <Textarea {...register(\"ix\")} />\n                    <FormErrorMessage>{errors?.ix?.message}</FormErrorMessage>\n                    <FormHelperText></FormHelperText>\n                  </FormControl>\n                  <FormControl isInvalid={!!errors?.drugs?.message}>\n                    <FormLabel fontSize={\"sm\"}>Drugs</FormLabel>\n                    <Textarea {...register(\"drugs\")} />\n                    <FormErrorMessage>\n                      {errors?.drugs?.message}\n                    </FormErrorMessage>\n                    <FormHelperText></FormHelperText>\n                  </FormControl>\n                </Grid>\n              </Stack>\n\n              <Stack\n                pl={2}\n                pr={2}\n                border=\"2px\"\n                borderRadius=\"10px\"\n                borderColor=\"green.500\"\n                backgroundColor=\"green.50\">\n                <FormControl isInvalid={!!errors?.recommendation?.message}>\n                  <FormLabel fontSize=\"lg\" mb={0} fontWeight=\"bold\">\n                    Recommendation\n                  </FormLabel>\n                  <Textarea {...register(\"recommendation\")} />\n                  <FormErrorMessage>\n                    {errors?.recommendation?.message}\n                  </FormErrorMessage>\n                  <FormHelperText></FormHelperText>\n                </FormControl>\n              </Stack>\n            </Stack>\n          </Box>\n        </Box>\n\n        <Box w={\"230px\"} h={{ md: \"600px\", lg: \"920px\" }} pl={{ lg: 4 }}>\n          <HandoverHistory\n            handleRefresh={props.handleRefresh}></HandoverHistory>\n        </Box>\n      </Flex>\n    </form>\n  );\n}\n","import * as React from \"react\";\nimport JqxGrid, {\n  IGridProps,\n  jqx\n} from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\n\nimport { userService } from \"../../services/userService\";\nimport { format, isValid } from \"date-fns\";\nimport _ from \"lodash\";\nimport { handoverService } from \"src/services/handoverService\";\nimport { getPatientService } from \"src/services/getPatientService\";\nimport { handovergroupService } from \"src/services/handoverGroupService\";\nclass HandoverGrid extends React.PureComponent<{}, IGridProps | any> {\n  private myGrid = React.createRef<JqxGrid>();\n\n  constructor(props: {}) {\n    super(props);\n    this.onFetch = this.onFetch.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onBinding = this.onBinding.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.clearSelection = this.clearSelection.bind(this);\n    this.refresh = _.debounce(this.refresh.bind(this), 300);\n    this.clear = this.clear.bind(this);\n    this.state = {\n      isDrawer: false,\n      selectedRow: null,\n      rowsheight: 30,\n      columns: [\n        {\n          text: \"logDate\",\n          datafield: \"updateDate\",\n          cellsformat: \"yyyy-MM-dd HH:mm\",\n          width: \"120px\",\n          sortable: false,\n          filterable: false\n        },\n        {\n          text: \"groupName\",\n          datafield: \"groupName\",\n          width: \"200px\",\n          sortable: false,\n          filterable: false\n        },\n        { text: \"patientName\", datafield: \"patientName\" },\n        {\n          text: \"specialtyCode\",\n          datafield: \"specialtyCode\",\n          width: \"120px\"\n        },\n        { text: \"wardCode\", datafield: \"wardCode\", width: \"120px\" },\n        { text: \"bedNumber\", datafield: \"bedNumber\", width: \"120px\" },\n        {\n          text: \"admissionTime\",\n          datafield: \"admissionTime\",\n          cellsformat: \"yyyy-MM-dd\",\n          width: \"200px\"\n        },\n        { text: \"caseNumber\", datafield: \"caseNumber\", width: \"200px\" }\n      ],\n      source: new jqx.dataAdapter({\n        datafields: [\n          //{ name: \"id\", type: \"string\" },\n          { name: \"updateDate\", type: \"date\", format: \"yyyy-MM-ddTHH:mm:ssZ\" },\n          { name: \"dob\", type: \"date\", format: \"yyyy-MM-dd\"  },\n          { name: \"sex\", type: \"string\" },\n          { name: \"patientKey\", type: \"string\" },\n          { name: \"patientName\", type: \"string\" },\n          { name: \"groupId\", type: \"string\" },\n          { name: \"groupName\", type: \"string\" },\n          { name: \"wardCode\", type: \"string\" },\n          { name: \"specialtyCode\", type: \"string\" },\n          { name: \"bedNumber\", type: \"string\" },\n          { name: \"admissionTime\", type: \"date\", format: \"yyyy-MM-ddTHH:mm:ssZ\"  },\n          { name: \"caseNumber\", type: \"string\" }\n        ],\n        totalrecords: 0,\n        datatype: \"json\",\n        id: \"patientKey\",\n        root: \"rows\",\n        sortcolumn: \"bedNumber\",\n        sortdirection: \"asc\",\n        url: `${process.env.REACT_APP_API}/api/Handover/QueryHandover`,\n        loadError(jqXHR: any, status: any, error: any) {\n\n        },\n        beforeSend: function (jqXHR: any, settings: any) {\n          let token = userService.userValue?.token;\n          jqXHR.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n        },\n        beforeprocessing: function (data: any) {\n          this.totalrecords = data.totalRows;\n        },\n\n        processdata: function (data: any) {\n          data.specialtyCode = handovergroupService.groupValue.specialtyCode;\n          if (isValid(handoverService?.dateValue)) {\n            data.asof = format(handoverService?.dateValue, \"yyyy-MM-dd\");\n          }\n        }\n      })\n    };\n  }\n\n  public render() {\n    return (\n      <>\n        <JqxGrid\n          theme={\"material-green\"}\n          ref={this.myGrid}\n          onFilter={this.onFetch}\n          // onPagechanged={this.onFetch}\n          // onPagesizechanged={this.onFetch}\n          onSort={this.onFetch}\n          onCellclick={this.onSelect}\n          rendergridrows={this.onRender}\n          onBindingcomplete={this.onBinding}\n          source={this.state.source}\n          columns={this.state.columns}\n          pageable={true}\n          pagesize={5}\n          altrows={true}\n          sortable={true}\n          columnsresize={true}\n          filterable={true}\n          virtualmode={true}\n          autoheight={true}\n          selectionmode={\"singlerow\"}\n          autoshowfiltericon={false}\n          updatedelay={20}\n          rowsheight={this.state.rowsheight}\n          width={\"100%\"}\n          scrollmode={\"deferred\"}\n        />\n      </>\n    );\n  }\n\n  private onBinding(e: any) {\n    this.myGrid.current!.setOptions({ rowsheight: this.state.rowsheight });\n  }\n\n  private onRender(obj: any) {\n    return obj.data;\n  }\n  private getSelected() {\n    const selected = this.myGrid.current!.getselectedrowindex();\n    return selected;\n  }\n\n  private onFetch(e: any): void {\n    this.refresh();\n    this.myGrid.current!.setOptions({ rowsheight: this.state.rowsheight });\n  }\n\n  private onSelect(e: any) {\n    getPatientService.send(\n      this.myGrid.current?.getrowdatabyid(e?.args?.row?.bounddata.patientKey)\n    );\n  }\n  public refresh() {\n    this.myGrid.current?.updatebounddata();\n  }\n  public clearSelection() {\n    this.myGrid.current!.clearselection();\n  }\n  public clear() {\n    this.myGrid.current?.clear();\n  }\n}\n\nexport { HandoverGrid };\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Box, Text, HStack } from \"@chakra-ui/react\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel\n} from \"@chakra-ui/react\";\nimport { PatientGrid } from \"../components/grid/DataGridPatient\";\nimport { HandoverForm } from \"../components/HandoverForm\";\nimport { userService } from \"src/services/userService\";\nimport { FaBed, FaListUl, FaPen } from \"react-icons/fa\";\nimport { LoginResponse } from \"../services/typescript-axios\";\n\nimport { delay, of } from \"rxjs\";\nimport { HandoverGrid } from \"../components/grid/DataGridHandover\";\nimport { useParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport { DateInputGroup } from \"../components/input/DateInputGroup\";\nimport { handoverService } from \"src/services/handoverService\";\nimport { handovergroupService } from \"src/services/handoverGroupService\";\n\nexport default HomeContent;\n\nfunction HomeContent(): JSX.Element {\n  const pGrid = useRef<PatientGrid>(null);\n  const hGrid = useRef<HandoverGrid>(null);\n  const [showGrid, setShowGrid] = useState<Boolean>(false);\n  const [handoverDate, setHandoverDate] = useState<Date>(\n    handoverService.dateValue\n  );\n  const [user, setUser] = useState<LoginResponse>(userService?.userValue);\n\n  let params = useParams();\n  const pid = params.patientKey;\n  const handleRefresh = useCallback(() => {\n    if (user && user.token) {\n      pGrid.current?.refresh();\n      hGrid.current?.refresh();\n    }else{\n      pGrid.current?.clear();\n      hGrid.current?.clear();\n    }\n  }, [user]);\n  useEffect(() => {\n    const userSubject = userService.user.subscribe((x) => setUser(x));\n    return () => {\n      userSubject.unsubscribe();\n    };\n  }, []);\n  useEffect(() => {\n    const groupSubject = handovergroupService.subject.subscribe((x) => {\n      if (x) handleRefresh();\n    });\n    return () => {\n      groupSubject.unsubscribe();\n    };\n  }, [handleRefresh]);\n  useEffect(() => {\n    let r = of([0]).pipe(delay(500));\n    const rxLoadGridSubject = r.subscribe((d) => {\n      setShowGrid(true);\n      //handleRefresh();\n    });\n\n    return () => {\n      rxLoadGridSubject.unsubscribe();\n    };\n  }, [handleRefresh, user]);\n\n  const handleFocusP = () => {\n    hGrid.current?.clearSelection();\n  };\n  const handleFocusG = () => {\n    pGrid.current?.clearSelection();\n  };\n\n  const handleHandoverDate = (d: Date) => {\n    setHandoverDate(d);\n    handoverService.sendDate(d);\n    hGrid.current?.refresh();\n  };\n\n  return (\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Accordion allowMultiple index={[0, 1, 2]}>\n        <AccordionItem backgroundColor={\"blue.50\"}>\n          <h2>\n            <AccordionButton as={Box}>\n              <Box flex={1} textAlign={\"left\"}>\n                <HStack>\n                  <Box sx={{ left: \"10px\" }} color={\"gray.400\"}>\n                    <FaBed />\n                  </Box>\n                  <Text color={\"gray.500\"}>Ward Patients</Text>\n                </HStack>\n              </Box>\n            </AccordionButton>\n          </h2>\n          <AccordionPanel pb={4} onFocus={handleFocusP}>\n            {!showGrid ? <></> : <PatientGrid ref={pGrid}></PatientGrid>}\n          </AccordionPanel>\n        </AccordionItem>\n        <AccordionItem backgroundColor={\"green.50\"}>\n          <h2>\n            <AccordionButton as={Box}>\n              <Box flex={1} textAlign={\"left\"}>\n                <HStack>\n                  <Box sx={{ left: \"10px\" }} color={\"gray.400\"}>\n                    <FaListUl />\n                  </Box>\n                  <Text color={\"gray.500\"}>Handover List</Text>\n                  <Box>\n                    <DatePicker\n                      onChange={handleHandoverDate} // send value to hook form\n                      selected={handoverDate}\n                      customInput={<DateInputGroup />}\n                      dateFormat={\"yyyy-MM-dd\"}\n                    />\n                  </Box>\n                </HStack>\n              </Box>\n            </AccordionButton>\n          </h2>\n          <AccordionPanel pb={4} onFocus={handleFocusG}>\n            {!showGrid ? <></> : <HandoverGrid ref={hGrid}></HandoverGrid>}\n          </AccordionPanel>\n        </AccordionItem>\n        <AccordionItem>\n          <h2>\n            <AccordionButton as={Box}>\n              <Box flex=\"1\" textAlign=\"left\">\n                <HStack>\n                  <Box sx={{ left: \"10px\" }} color={\"gray.400\"}>\n                    <FaPen />\n                  </Box>\n                  <Text color={\"gray.500\"}>Handover Form</Text>\n                </HStack>\n              </Box>\n            </AccordionButton>\n          </h2>\n          <AccordionPanel pb={4}>\n            <HandoverForm handleRefresh={handleRefresh}></HandoverForm>\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    </Box>\n  );\n}\n","import \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material-green.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./styles.css\";\n\nimport React from \"react\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { NavBar } from \"./components/NavBar\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"./services/themeService\";\n\nimport HomeContent from \"./pages/HomeContent\";\n\nexport const packageJson = require(\"../package.json\");\n\nexport default function App() {\n  document.title = \"Handover\";\n  return (\n    <ChakraProvider theme={theme}>\n      <BrowserRouter basename={\"/\"}>\n        <NavBar />\n        <Routes>\n          <Route path=\"/\" element={<Navigate to=\"/home\" replace={true} />} />\n          <Route path=\"home\" element={<HomeContent />}>\n            <Route path=\":patientKey\" element={<HomeContent />} />\n          </Route>\n          <Route path=\"*\" element={<Navigate to=\"/home\" replace={true} />} />\n        </Routes>\n      </BrowserRouter>\n    </ChakraProvider>\n  );\n}\n","import { render } from \"react-dom\";\nimport App from \"./App\";\n\nwindow.process = {} as any;\n\nlet ieloading = document.getElementById(\"ieloading\");\nieloading?.remove();\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}