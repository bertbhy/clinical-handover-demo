/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GridQueryResponseOfQueryHandoverResponse } from '../models';
import { Handover } from '../models';
import { HandoverGroup } from '../models';
import { HandoverLog } from '../models';
/**
 * HandoverApi - axios parameter creator
 * @export
 */
export const HandoverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoverDeleteHandover: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Handover/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoverGetHandover: async (patientKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientKey' is not null or undefined
            if (patientKey === null || patientKey === undefined) {
                throw new RequiredError('patientKey','Required parameter patientKey was null or undefined when calling handoverGetHandover.');
            }
            const localVarPath = `/api/Handover/{patientKey}`
                .replace(`{${"patientKey"}}`, encodeURIComponent(String(patientKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoverGetHandoverGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Handover/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {string} [log] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoverGetHandoverHistory: async (patientKey: string, log?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientKey' is not null or undefined
            if (patientKey === null || patientKey === undefined) {
                throw new RequiredError('patientKey','Required parameter patientKey was null or undefined when calling handoverGetHandoverHistory.');
            }
            const localVarPath = `/api/Handover/history/{patientKey}`
                .replace(`{${"patientKey"}}`, encodeURIComponent(String(patientKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (log !== undefined) {
                localVarQueryParameter['log'] = log;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoverGetHandoverLog: async (patientKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientKey' is not null or undefined
            if (patientKey === null || patientKey === undefined) {
                throw new RequiredError('patientKey','Required parameter patientKey was null or undefined when calling handoverGetHandoverLog.');
            }
            const localVarPath = `/api/Handover/log/{patientKey}`
                .replace(`{${"patientKey"}}`, encodeURIComponent(String(patientKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Handover} body 
         * @param {number} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoverPostHandover: async (body: Handover, groupId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling handoverPostHandover.');
            }
            const localVarPath = `/api/Handover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [specialtyCode] 
         * @param {Date} [asof] 
         * @param {string} [sortdatafield] 
         * @param {string} [sortorder] 
         * @param {number} [pagesize] 
         * @param {number} [pagenum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoverQueryHandover: async (specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Handover/QueryHandover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (specialtyCode !== undefined) {
                localVarQueryParameter['specialtyCode'] = specialtyCode;
            }

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = (asof as any instanceof Date) ?
                    (asof as any).toISOString() :
                    asof;
            }

            if (sortdatafield !== undefined) {
                localVarQueryParameter['sortdatafield'] = sortdatafield;
            }

            if (sortorder !== undefined) {
                localVarQueryParameter['sortorder'] = sortorder;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (pagenum !== undefined) {
                localVarQueryParameter['pagenum'] = pagenum;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HandoverApi - functional programming interface
 * @export
 */
export const HandoverApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverDeleteHandover(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverDeleteHandover(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandover(patientKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Handover>>> {
            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandover(patientKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandoverGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HandoverGroup>>>> {
            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandoverGroups(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {string} [log] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandoverHistory(patientKey: string, log?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Handover>>> {
            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandoverHistory(patientKey, log, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandoverLog(patientKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HandoverLog>>>> {
            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverGetHandoverLog(patientKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Handover} body 
         * @param {number} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverPostHandover(body: Handover, groupId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Handover>>> {
            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverPostHandover(body, groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [specialtyCode] 
         * @param {Date} [asof] 
         * @param {string} [sortdatafield] 
         * @param {string} [sortorder] 
         * @param {number} [pagesize] 
         * @param {number} [pagenum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverQueryHandover(specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GridQueryResponseOfQueryHandoverResponse>>> {
            const localVarAxiosArgs = await HandoverApiAxiosParamCreator(configuration).handoverQueryHandover(specialtyCode, asof, sortdatafield, sortorder, pagesize, pagenum, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HandoverApi - factory interface
 * @export
 */
export const HandoverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverDeleteHandover(id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return HandoverApiFp(configuration).handoverDeleteHandover(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandover(patientKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Handover>> {
            return HandoverApiFp(configuration).handoverGetHandover(patientKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandoverGroups(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HandoverGroup>>> {
            return HandoverApiFp(configuration).handoverGetHandoverGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {string} [log] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandoverHistory(patientKey: string, log?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Handover>> {
            return HandoverApiFp(configuration).handoverGetHandoverHistory(patientKey, log, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} patientKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverGetHandoverLog(patientKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HandoverLog>>> {
            return HandoverApiFp(configuration).handoverGetHandoverLog(patientKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Handover} body 
         * @param {number} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverPostHandover(body: Handover, groupId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Handover>> {
            return HandoverApiFp(configuration).handoverPostHandover(body, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [specialtyCode] 
         * @param {Date} [asof] 
         * @param {string} [sortdatafield] 
         * @param {string} [sortorder] 
         * @param {number} [pagesize] 
         * @param {number} [pagenum] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handoverQueryHandover(specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GridQueryResponseOfQueryHandoverResponse>> {
            return HandoverApiFp(configuration).handoverQueryHandover(specialtyCode, asof, sortdatafield, sortorder, pagesize, pagenum, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HandoverApi - object-oriented interface
 * @export
 * @class HandoverApi
 * @extends {BaseAPI}
 */
export class HandoverApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandoverApi
     */
    public async handoverDeleteHandover(id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return HandoverApiFp(this.configuration).handoverDeleteHandover(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} patientKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandoverApi
     */
    public async handoverGetHandover(patientKey: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Handover>> {
        return HandoverApiFp(this.configuration).handoverGetHandover(patientKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandoverApi
     */
    public async handoverGetHandoverGroups(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HandoverGroup>>> {
        return HandoverApiFp(this.configuration).handoverGetHandoverGroups(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} patientKey 
     * @param {string} [log] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandoverApi
     */
    public async handoverGetHandoverHistory(patientKey: string, log?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Handover>> {
        return HandoverApiFp(this.configuration).handoverGetHandoverHistory(patientKey, log, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} patientKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandoverApi
     */
    public async handoverGetHandoverLog(patientKey: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HandoverLog>>> {
        return HandoverApiFp(this.configuration).handoverGetHandoverLog(patientKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Handover} body 
     * @param {number} [groupId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandoverApi
     */
    public async handoverPostHandover(body: Handover, groupId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Handover>> {
        return HandoverApiFp(this.configuration).handoverPostHandover(body, groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [specialtyCode] 
     * @param {Date} [asof] 
     * @param {string} [sortdatafield] 
     * @param {string} [sortorder] 
     * @param {number} [pagesize] 
     * @param {number} [pagenum] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandoverApi
     */
    public async handoverQueryHandover(specialtyCode?: string, asof?: Date, sortdatafield?: string, sortorder?: string, pagesize?: number, pagenum?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GridQueryResponseOfQueryHandoverResponse>> {
        return HandoverApiFp(this.configuration).handoverQueryHandover(specialtyCode, asof, sortdatafield, sortorder, pagesize, pagenum, options).then((request) => request(this.axios, this.basePath));
    }
}
